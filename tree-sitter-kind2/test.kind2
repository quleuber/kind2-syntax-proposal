type Bool {
  False
  True
}

type List <T: Type> {
  Nil
  {Cons (head: T) (tail: T)}
}

Neg (x: Bool) : Bool {
  (iff x False True)
}

iff <T: Type> (condition: Bool) (a: T) (b: T) : T {
  | False _ b => b
  | True  a _ => a
}

half (n: Nat) : Nat {
  | {Succ {Succ pred}} => {
      let tail = (half pred)
      {Succ tail}
    }
  | _ => Zero
}

Main: Empty {
  // let b = if 
}

Not (T: Type) : Type {
  @T -> Empty
}

map
  <C: @Type -> Type> <MC: Mappable C>
  <A: Type> <B: Type>
  (f: @A -> B) (xs: C A)
  : (C B)
{
  (MC.map f xs)
}
