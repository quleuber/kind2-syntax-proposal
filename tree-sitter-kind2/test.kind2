type Bool {
  False
  True
}

type List <T: Type> {
  Nil
  {Cons (head: T) (tail: T)}
}

neg (x: Bool) : Bool =
  (iff x False True)

iff <T: Type> (condition: Bool) (a: T) (b: T) : T {
  iff False _ b = b
  iff True  a _ = a
}

half (n: Nat) : Nat {
  half {Succ {Succ pred}} = {
      let tail = (half pred)
      {Succ tail}
    }
  half _ = Zero
}

Main (x: Bool) : Empty = {
  let n1 =
    if (not x)
      then (Succ Zero)
      else (Succ (Succ Zero))

  let n2 =
    if x {
      let kek = (double n1)
      (pred kek)
    } else {
      (pred kek)
    }

  b
}

Not (T: Type) : Type =
  @T -> Empty

map
  <C: @Type -> Type> <MC: Mappable C>
  <A: Type> <B: Type>
  (f: @A -> B) (xs: C A)
  : (C B) =
    (MC.map f xs)
